package introduction;

public class dataTypes {

	public static void main(String[] args) {

		System.out.println("Hola CH35");
		
		
		/*Comentario
		  multilinea
		 */
		
		//Comentario una sola línea
		
		
		/*Tipos de dato*/
		//boolean = true o false = 1 bit
		boolean nuevoUsuario = true;
		System.out.println("Tipo de dato boolen" + nuevoUsuario);
		//char = Cáracter Unicode = 16 bits
		char caracter = 3;
		System.out.println("Tipo de dato char" + caracter);
		//byte = Entero con signo = 8 bits = [-128 a 127]
		byte piso = 127;
		System.out.println("Tipo de dato byte" + piso);
		//short = Entero con signo = 16 bits = [-32768 a 32767]
		short total = 1500;
		System.out.println("Tipo de dato short" + total);
		//int = Entero con signo = 32 bits = [-2147483648 a 2147483647]
		int visitas = 456320;
		System.out.println("Tipo de dato int" + visitas);
		//long = Entero con signo = 64 bits = [-92233720368775808 a 92233720368775807]
		long distancia = 20775806;
		System.out.println("Tipo de dato long" + distancia);
		//float = Flotante de precisión simple = 32 bits = 
		float estatura = 15.50f;
		System.out.println("Tipo de dato float" + estatura);
		//double = Flotante de precisión doble  = 64 bits = 
		double precio = 15263.20;
		System.out.println("Tipo de dato double" + precio);
	
		/*
		 * 
		 * 	byte	1 byte	Stores whole numbers from -128 to 127
			short	2 bytes	Stores whole numbers from -32,768 to 32,767
			int	4 bytes	Stores whole numbers from -2,147,483,648 to 2,147,483,647
			long	8 bytes	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
			float	4 bytes	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
			double	8 bytes	Stores fractional numbers. Sufficient for storing 15 decimal digits
			boolean	1 bit	Stores true or false values
			char	2 bytes	Stores a single character/letter or ASCII values
		 */
		
		
		/** Java Type Casting **

		Widening Casting (automatically) - converting a smaller type to a larger type size
		byte -> short -> char -> int -> long -> float -> double
		
		Narrowing Casting (manually) - converting a larger type to a smaller size type
		double -> float -> long -> int -> char -> short -> byte
		 */
		
			/*Widening Casting
				Widening casting is done automatically when passing a smaller size type to a larger size type:*/
				int myInt = 9;
			    double myDouble = myInt; // Automatic casting: int to double
		
			    System.out.println(myInt);      // Outputs 9
			    System.out.println(myDouble);   // Outputs 9.0
			
			/*Narrowing Casting
				Narrowing casting must be done manually by placing the type in parentheses in front of the value:*/
			    double myDouble2 = 9.78d;
			    int myInt2 = (int) myDouble; // Manual casting: double to int
		
			    System.out.println(myDouble2);   // Outputs 9.78
			    System.out.println(myInt2);      // Outputs 9
	
	}

}
