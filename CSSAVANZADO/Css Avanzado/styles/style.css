    /*
    Varibales
    Definir variable --nombre-varibale
    Usar variable var(--nombre-varibale);
    */

    :root {
        --font-primary: 'Nunito Sans', sans-serif;
        --primary-color: #730E0E;
        --secondary-color: #BF8C6F;
        --background-color: #D5E7F2;
        --color-light: #A6261B;
        --color-dark: #362929;
        --black: #000000;
        --white: #ffffff;
    }

    body {
        font-family: var(--font_primary);
        color: var(--white);
        background-color: var(--background-color);
    }

    h1,
    h2,
    h3 {
        color: var(--primary-color);
    }


    .position {
        width: 100px;
        height: 100px;
        background-color: var(--primary-color);
    }

    /*La posición estatica es la posición por default de html, no se afacte por 
    top, left ni right*/
    #static {
        position: static;
        top: 2000px;
        bottom: 2000px;
        background-color: var(--secondary-color);
    }

    /* Es posicionado de forma relativa al elemento anterior y si permite movimiento mediante propiedades top, bottom, left, right */
    #relative {
        position: relative;
        top: 50px;
        left: 200px;
        background-color: var(--color-light);
    }

    #absolute {
        position: absolute;
        top: 20px;
        left: 20px;
        background-color: var(--color-dark);
    }

    #ancestro {
        position: absolute;
        width: 100px;
        height: 100px;
        background-color: var(--black);
        border: solid var(--color-light) 1px;
    }

    /*Nos permite mantener el elemento de manera fija en el viewport.*/

    /*     #fixed {
        position: fixed;
        top: 500px;
        left: 350px;
        background-color: var(--color-light);
    }*/

    #chat {
        position: fixed;
        top: 500px;
        left: 450px;
        width: 3em;
        height: 3em;
    }

    #icono_whatsapp {
        width: 100%;
    }

    .display-inline {
        width: 100px;
        height: 100px;
        background-color: var(--color-dark);
        color: var(--white);
        text-align: center;
        margin: 2px;
    }

    #display1,
    #display2 {
        display: inline;
    }

    .display-block {
        /* display: block; */
        display: inline-block;
        width: 100px;
        height: 100px;
        background-color: var(--color-light);
        color: var(--white);
        text-align: center;
        margin: 2px;
    }

    .display-none {
        color: var(--black);
    }

    @media (max-width: 720px) {
        .display-none {
            display: none;
        }
    }

    /* Display flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos.
    Por default, la dirección de flex es en filas (row).
    Vamos a poder acceder a diversas propiedades para modificar el comportamiento de los elementos.
        > - flex-direction: column, column-reverse, row, row-reverse
        > - flex-wrap: wrap, nowrap, wrap-reverse
        > - justify-content: center, flex-start, flex-end, space between, space-around
        > - align-item: start, end, center
        > - align-self: flex-start, flex-end
    */

    .container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
        align-items: center;

        width: auto;
        height: 350px;
        margin: 10px;
        padding: 15px;
        border-radius: 10px;
        background-color: var(--primary-color);
    }

    .display-flex {
        width: 100px;
        height: 80px;
        margin: 5px;
        padding: 2px;
        text-align: center;
        background-color: var(--color-light);
        border-radius: 6px;

        display: flex;
        justify-content: center;
        align-items: center;
    }

    #item-6 {
        align-self: flex-end;
    }

    a {
        text-decoration: none;
        color: var(--white);
    }

    /*
    Grid Layout


    */
    .grid {
        display: grid;
        grid-template-columns: auto auto;
        gap: 10px;
        padding: 10px;
    }

    .display-grid {
        background-color: var(--black);
        color: var(--white);
        padding: 20px;
        border-radius: 3px;
        text-align: center;
        border: solid var(--color-light) 1px;
    }

    .container-1 {
        display: grid;
        grid-template-columns: 4;
        grid-template-areas: 
        "header header header header" 
        "nav nav nav nav"
        "section section section aside"
        "article article article aside"
        "footer footer footer footer"
        ;

        width: auto;
        height: 500px;
        border: solid var(--primary-color) 0.7px;
        text-align: center;
        margin: 10px;
        font-size: 18px;
    }

    header {
        background-color: aquamarine;
        grid-area: header;
    }

    nav {
        background-color: cadetblue;
        grid-area: nav;
    }

    aside {
        background-color: blue;
        grid-area: aside;
    }

    section {
        background-color: cornflowerblue;
        grid-area: section;
    }

    article {
        background-color: aquamarine;
        grid-area: article;
    }

    footer {
        background-color: darkcyan;
        grid-area: footer;
    }

@media (max-width: 720px ){
    .container-1 {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: (6, 2fr);
        grid-template-areas: 
        "header" 
        "nav"
        "section"
        "aside"
        "article"
        "footer"
        ;

        width: auto;
        height: 500px;
        border: solid var(--primary-color) 0.7px;
        text-align: center;
        margin: 10px;
        font-size: 18px;
    }
}